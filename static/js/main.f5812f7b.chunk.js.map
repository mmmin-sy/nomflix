{"version":3,"sources":["assets/noPosterSmall.png","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Components/Header.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Container","styled","div","Title","span","Grid","Section","title","children","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","default","length","substring","HomePresenter","nowPlaying","upcoming","popular","loading","error","Helmet","Loader","map","movie","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","handleSumit","event","preventDefault","searchByTerm","target","a","Header","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","ImdbLink","Divider","OverView","p","ProductionInfo","InfoTitle","h4","InfoList","InfoItem","VideoContainer","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","imdb_id","href","overview","production_companies","company","production_countries","country","videos","width","height","url","key","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","console","log","path","exact","component","Home","TV","render","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5812f7b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.bb351cb8.png\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    :not(:last-child){\n        margin-bottom:50px;\n    }\n`;\n\nconst Title = styled.span`\n    font-size: 16px;\n    font-weight: 600;    \n`;\n\nconst Grid = styled.div`\n    margin-top: 25px;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 125px);\n    grid-gap: 25px;\n`;\n\nconst Section = ({title, children}) => (\n    <Container>\n        <Title>{title}</Title>\n        <Grid>{children}</Grid>\n    </Container>\n);\n\nSection.propTypes = {\n    title:PropTypes.string.isRequired,\n    children:PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n}\n\nexport default Section;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display:flex;\n    justify-content: center;\n    font-size: 50px;\n    margin-top: 20px;\n`;\n\nexport default () => <Container><span role=\"img\" aria-label=\"Loading\">🌼</span></Container>;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n`;\n\nconst Text = styled.span`\n    color: ${props => props.color}\n`;\n\nconst Message = ({text, color}) => (\n    <Container>\n        <Text color={color}>{text}</Text>\n    </Container>\n);\n Message.propTypes = {\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired\n};\n\nexport default Message;\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    font-size: 12px;    \n`;\n\nconst Image = styled.div`\n    background-image: url(${props => props.bgUrl});\n    height: 180px;\n    background-size: cover;\n    border-radius: 4px;\n    background-position: center center;\n    transition: opacity 0.1s linear;\n`;\n\nconst Rating = styled.span`\n    position:absolute;\n    bottom:5px;\n    right: 5px;\n    opacity: 0;\n    transition: opacity 0.1s linear;\n`;\n\nconst ImageContainer = styled.div`\n    margin-bottom: 5px;\n    &:hover {\n        ${Image}{\n            opacity: 0.3;\n        }\n        ${Rating}{\n            opacity: 1;\n        }\n    }\n    position: relative;\n`;\n\nconst Title = styled.span`\n    display: block;\n    margin-bottom: 3px;\n`;\n\nconst Year = styled.span`\n    font-size: 10px;\n    color: rgba(255, 255, 255, 0.5);\n`;\n\nconst Poster = ({id, imageUrl, title, rating, year, isMovie = false}) => (\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\n        <Container>\n            <ImageContainer>\n                <Image bgUrl={\n                    imageUrl \n                    ? `https://image.tmdb.org/t/p/w300${imageUrl}` \n                    : require(\"../assets/noPosterSmall.png\").default\n                    } />\n                <Rating><span role=\"img\" aria-label=\"rating\">⭐️</span>{rating}/10</Rating>\n            </ImageContainer>\n            <Title>{title.length > 18 ? `${title.substring(0, 18)}...` : title}</Title>\n            <Year>{year}</Year>\n        </Container>\n    </Link>\n);\n\nPoster.propTypes = {\n    id: PropTypes.number.isRequired,\n    imageUrl: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    rating: PropTypes.number,\n    year: PropTypes.string,\n    isMovie: PropTypes.bool.isRequired\n};\n\nexport default Poster;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\nimport Section from \"Components/Section\";\nimport Loader from \"Components/Loader\";\nimport Message from \"Components/Message\";\nimport Poster from \"Components/Poster\";\n\nconst Container = styled.div`\n    padding:20px;\n`;\n\nconst HomePresenter = ({ nowPlaying, upcoming, popular, loading, error }) => (\n    <>\n        <Helmet>\n            <title>Movies | Nomflix </title>\n        </Helmet>\n        {loading ? <Loader /> : (\n            <Container>\n                { nowPlaying && nowPlaying.length > 0 && (\n                    <Section title=\"Now Playing\">{nowPlaying.map(movie => (\n                        <Poster \n                        key={movie.id} \n                        id={movie.id}\n                        imageUrl={movie.poster_path}\n                        title={movie.original_title} \n                        rating={movie.vote_average}\n                        isMovie={true}\n                        year={movie.release_date && movie.release_date.substring(0, 4)}\n                        />\n                    ))}</Section>\n                )}\n                { upcoming && upcoming.length > 0 && (\n                    <Section title=\"Upcoming Movies\">{upcoming.map(movie => (\n                    <Poster \n                        key={movie.id} \n                        id={movie.id}\n                        imageUrl={movie.poster_path}\n                        title={movie.original_title} \n                        rating={movie.vote_average}\n                        isMovie={true}\n                        year={movie.release_date && movie.release_date.substring(0, 4)}\n                        />\n                    ))}</Section>\n                )}\n                { popular && popular.length > 0 && (\n                    <Section title=\"Popular Movies\">{popular.map(movie => (\n                        <Poster \n                        key={movie.id} \n                        id={movie.id}\n                        imageUrl={movie.poster_path}\n                        title={movie.original_title} \n                        rating={movie.vote_average}\n                        isMovie={true}\n                        year={movie.release_date && movie.release_date.substring(0, 4)}\n                        />\n                    ))}</Section>\n                )}\n                {error && <Message color=\"#d63031\" text={error} />}\n            </Container>\n        )}\n    </>\n);\n\nHomePresenter.propTypes ={\n    nowPlaying:PropTypes.array,\n    upcoming:PropTypes.array, \n    popular:PropTypes.array, \n    loading:PropTypes.bool.isRequired, \n    error:PropTypes.string\n}\n\nexport default HomePresenter;","import axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n    params: {\n        \"api_key\":\"66504ad4994ed34286632b191cb97174\",\n        \"language\":\"en-US\"\n    }\n})\n\nexport const moviesApi = {\n    nowPlaying: () => api.get(\"movie/now_playing\"),\n    upcoming: () => api.get(\"movie/upcoming\"),\n    popular: () => api.get(\"movie/popular\"),\n    movieDetail: id => api.get(`movie/${id}`, {\n        params: {\n            append_to_response: 'videos'\n        }\n    }),\n    search: term => api.get(\"search/movie\", {\n        params: {\n            query: encodeURIComponent(term)\n        }\n    })\n}\n\nexport const tvApi = {\n    topRated: () => api.get(\"tv/top_rated\"),\n    popular: () => api.get(\"tv/popular\"),\n    airingToday: () => api.get(\"tv/airing_today\"),\n    showDetail: id => api.get(`tv/${id}`, {\n        params: {\n            append_to_response: 'videos'\n        }\n    }),\n    search: term => api.get(\"search/tv\", {\n        params: {\n            query: encodeURIComponent(term)\n        }\n    })\n}\n\n\nexport default api;","import HomeContainer from \"./HomeContainer\";\n\n\nexport default HomeContainer;","import React from \"react\";\nimport HomePresenter from \"./HomePresenter\";\nimport { moviesApi } from \"api\";\n\nexport default class extends React.Component{\n    state = {\n        nowPlaying: null,\n        upcoming: null,\n        popular: null,\n        error: null,\n        loading: true\n    }\n\n    async componentDidMount(){\n        try {\n            const {data: {results: nowPlaying}} = await moviesApi.nowPlaying();\n            const {data: {results: upcoming}} = await moviesApi.upcoming();\n            const {data: {results: popular}} = await moviesApi.popular();\n            this.setState({\n                nowPlaying,\n                upcoming,\n                popular\n            })\n        } catch {\n            this.setState({\n                error: \"Can't get Movies\"\n            })\n        } finally {\n            this.setState({\n                loading: false\n            })\n        }\n    }\n\n    render(){\n        const { nowPlaying, upcoming, popular, error, loading} = this.state;\n        return (\n            <HomePresenter \n            nowPlaying={nowPlaying} \n            upcoming={upcoming} \n            popular={popular} \n            error={error} \n            loading={loading} \n            />\n        ) \n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\nimport Section from \"Components/Section\";\nimport Loader from \"Components/Loader\";\nimport Message from \"Components/Message\";\nimport Poster from \"Components/Poster\";\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nconst TVPresenter = ({\n    topRated, popular, airingToday, loading, error\n}) => (\n    <>\n        <Helmet>\n            <title>TV Shows | Nomflix</title>\n        </Helmet>\n        {loading ? <Loader /> : (\n        <Container>\n            {topRated && topRated.length > 0 && (\n                <Section title=\"Top Rated Shows\">\n                    {topRated.map(show => (\n                        <Poster \n                            key={show.id} \n                            id={show.id}\n                            imageUrl={show.poster_path}\n                            title={show.original_name} \n                            rating={show.vote_average}\n                            year={show.release_date && show.release_date.substring(0, 4)}\n                        />\n                    ))}\n                </Section>\n            )}\n            {popular && popular.length > 0 && (\n                <Section title=\"Popular Shows\">\n                    {popular.map(show => (\n                        <Poster \n                            key={show.id} \n                            id={show.id}\n                            imageUrl={show.poster_path}\n                            title={show.original_name} \n                            rating={show.vote_average}\n                            year={show.first_air_date && show.first_air_date.substring(0, 4)}\n                        />\n                    ))}\n                </Section>\n            )}\n            {airingToday && airingToday.length > 0 && (\n                <Section title=\"Airing Today Shows\">\n                    {airingToday.map(show => (\n                        <Poster \n                            key={show.id} \n                            id={show.id}\n                            imageUrl={show.poster_path}\n                            title={show.original_name} \n                            rating={show.vote_average}\n                            year={show.release_date && show.release_date.substring(0, 4)}\n                        />\n                    ))}\n                </Section>\n            )}\n            {error && <Message color=\"#d63031\" text={error} />}\n        </Container>\n        )}\n    </>\n);\n\nTVPresenter.propTypes ={\n    topRated:PropTypes.array,\n    popular:PropTypes.array, \n    airingToday:PropTypes.array, \n    loading:PropTypes.bool.isRequired, \n    error:PropTypes.string\n}\n\nexport default TVPresenter;","import TVContainer from \"./TVContainer\";\n\n\nexport default TVContainer;","import React from \"react\";\nimport TVPresenter from \"./TVPresenter\";\nimport { tvApi } from \"api\";\n\nexport default class extends React.Component{\n    state = {\n        topRated: null,\n        popular: null,\n        airingToday: null,\n        error: null,\n        loading: true\n    }\n\n    async componentDidMount(){\n        try {\n            const {data: {results: topRated}} = await tvApi.topRated();\n            const {data: {results: popular}} = await tvApi.popular();\n            const {data: {results: airingToday}} = await tvApi.airingToday();\n            this.setState({\n                topRated,\n                popular,\n                airingToday\n            })\n        } catch {\n            this.setState({\n                error: \"Can't get Movies\"\n            })\n        } finally {\n            this.setState({\n                loading: false\n            })\n        }\n    }\n\n    render(){\n        const { topRated, popular, airingToday, error, loading} = this.state;\n        return (\n            <TVPresenter \n            topRated={topRated} \n            popular={popular} \n            airingToday={airingToday} \n            error={error} \n            loading={loading} \n            />\n        ) \n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\nimport Loader from \"Components/Loader\";\nimport Section from \"Components/Section\";\nimport Message from \"Components/Message\";\nimport Poster from \"Components/Poster\";\nconst Container = styled.div`\n    padding: 0 20px;    \n`;\n\nconst Form = styled.form`\n    margin-bottom: 50px;\n    width: 100%;\n`;\n\nconst Input = styled.input`\n    all: unset;\n    font-size: 28px;\n    width: 100%;\n`;\n\nconst SearchPresenter = ({\n    movieResults, tvResults, loading, error, searchTerm, handleSubmit, updateTerm\n}) => \n    <Container>\n        <Helmet><title>Search | Nomflix</title></Helmet>\n    <Form onSubmit={handleSubmit}>\n        <Input placeholder=\"Search Movies or TV Shows...\" value={searchTerm} onChange={updateTerm}/>\n    </Form>\n    {loading ? <Loader /> : <>\n    {movieResults && movieResults.length > 0 && (\n        <Section title=\"Movie Results\">\n            {movieResults.map(movie => \n                <Poster \n                    key={movie.id} \n                    id={movie.id}\n                    imageUrl={movie.poster_path}\n                    title={movie.original_title} \n                    rating={movie.vote_average}\n                    isMovie={true}\n                    year={movie.release_date && movie.release_date.substring(0, 4)}\n                />\n            )}\n        </Section>\n    )}\n    {tvResults && tvResults.length > 0 && (\n        <Section title=\"TV Show Results\">\n            {tvResults.map(show => \n                <Poster \n                    key={show.id} \n                    id={show.id}\n                    imageUrl={show.poster_path}\n                    title={show.original_name} \n                    rating={show.vote_average}\n                    isMovie={true}\n                    year={show.first_air_date && show.first_air_date.substring(0, 4)}\n                />\n            )}\n        </Section>\n    )}\n    {error && <Message color=\"#d63031\" text={error} />}\n    {tvResults && movieResults && tvResults.length === 0 && movieResults.length === 0 && (\n        <Message text=\"Nothing found\" color=\"#b2bec3\" />\n    )}\n    </>}\n</Container>;\n\nSearchPresenter.propTypes ={\n    movieResults:PropTypes.array,\n    tvResults:PropTypes.array, \n    loading:PropTypes.bool.isRequired, \n    error:PropTypes.string,\n    searchTerm:PropTypes.string,\n    handleSubmit:PropTypes.func.isRequired,\n    updateTerm:PropTypes.func.isRequired\n}\n\nexport default SearchPresenter;","import SearchContainer from \"./SearchContainer\";\n\nexport default SearchContainer;","import React from \"react\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { moviesApi, tvApi } from \"api\";\n\nexport default class extends React.Component{\n    state = {\n        movieResults: null,\n        tvResults: null,\n        searchTerm: \"\",\n        error: null,\n        loading: false\n    }\n\n    handleSumit = (event) => {\n        event.preventDefault();\n        const { searchTerm } = this.state;\n        if(searchTerm !== \"\"){\n            this.searchByTerm();\n        }\n    }\n\n    updateTerm = (event) => {\n        const {target: {value}} = event;\n        this.setState({\n            searchTerm: value\n        })\n    }\n\n    searchByTerm = async() => {\n        const { searchTerm } = this.state;\n        this.setState({ loading: true });\n        try {\n            const {data: {results: movieResults}} = await moviesApi.search(searchTerm);\n            const {data: {results: tvResults}} = await tvApi.search(searchTerm);\n            this.setState({\n                movieResults,\n                tvResults\n            })\n        } catch {\n            this.setState({\n                error: \"Can't get results\"\n            })\n        } finally {\n            this.setState({ loading: false });\n        }\n    }\n\n    render(){\n        const { movieResults, tvResults, searchTerm, error, loading} = this.state;\n        return (\n            <SearchPresenter \n            movieResults={movieResults} \n            tvResults={tvResults} \n            searchTerm={searchTerm} \n            error={error} \n            loading={loading} \n            handleSubmit={this.handleSumit}\n            updateTerm={this.updateTerm}\n            />\n        ) \n    }\n}","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\n\nconst Header = styled.header`\n    color:white;\n    position:fixed;\n    top:0;\n    left:0;\n    width:100%;\n    height:50px;\n    display:flex;\n    align-items:center;\n    padding:0 10px;\n    background-color:rgba(20,20,20,0.8);\n    box-shadow:0px 1px 5px 2px rgba(0,0,0,0.8);\n`;\n\nconst List = styled.ul`\n    display: flex;\n`;\n\nconst Item = styled.li`\n    width:80px;\n    height:50px;\n    text-align:center;\n    border-bottom:5px solid ${props => props.current ? \"#e74c3c\" : \"transparent\"};\n    transition: border-bottom 0.5s ease-in-out;\n`;\nconst SLink = styled(Link)`\n    height:50px;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n`;\n\nexport default withRouter(({location: {pathname}}) => (\n    <Header>\n        <List>\n            <Item current={pathname === \"/\"}>\n                <SLink to=\"/\">Movies</SLink>\n            </Item>\n            <Item current={pathname === \"/tv\"}>\n                <SLink to=\"/tv\">TV</SLink>\n            </Item>\n            <Item current={pathname === \"/search\"}>\n                <SLink to=\"/search\">Search</SLink>\n            </Item>\n        </List>\n    </Header>\n));","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport ReactPlayer from \"react-player\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport Helmet from \"react-helmet\";\nimport Loader from \"Components/Loader\";\n\nconst Container = styled.div`\n    height: calc(100vh - 50px);\n    width: 100%;\n    position:relative;\n    padding: 50px;\n`;\n\nconst Backdrop = styled.div`\n    position: absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n    background-image: url(${props => props.bgImage});\n    background-position:center center;\n    background-size: cover;\n    filter:blur(3px);\n    opacity:0.5;\n    z-index:0;\n`;\n\nconst Content = styled.div`\n    display: flex;\n    width:100%;\n    height:100%;\n    position:relative;\n    z-index:1;\n`;\n\nconst Cover = styled.div`\n    width: 30%;\n    background-image: url(${props => props.bgImage});\n    background-position:center center;\n    background-size: cover;\n    height:100%;\n    border-radius: 5px;\n`;\n\nconst Data = styled.div`\n    width:70%;\n    margin-left:10px;\n`;\n\nconst Title = styled.h3`\n    font-size: 32px;\n`;\n\nconst ItemContainer = styled.div`\n    margin:20px 0;\n`;\n\nconst Item = styled.span``;\n\nconst ImdbLink = styled.a`\n    margin: 0 10px;\n    padding: 0 3px;\n    font-weight:600;\n    background-color:#F5C518;\n    border-radius:2px;\n    font-size: 10px;\n    color:#000;\n`;\n\nconst Divider = styled.span`\n    margin: 0 10px;\n`;\n\nconst OverView = styled.p`\n    font-size: 12px;\n    opacity: 0.7;\n    line-height:1.5;\n    width:50%;\n    margin-bottom: 20px;\n`;\n\nconst ProductionInfo = styled.div`\n    padding:0 10px;\n    margin-bottom: 20px;\n`;\n\nconst InfoTitle = styled.h4`\n    font-weight:600;\n`;\n\nconst InfoList = styled.ul`\n    margin-top: 10px;\n    margin-bottom: 10px;\n`;\n\nconst InfoItem = styled.li`\n    margin-bottom: 5px;\n`;\n\nconst VideoContainer = styled.div`\n    width:70%;\n    padding: 10px;\n`;\n\nconst DetailPresenter = ({\n    result, loading, error\n}) => (\n    loading ? (\n        <>\n        <Helmet>\n            <title>Loading | Nomflix</title>\n        </Helmet>\n        <Loader />\n        </>\n    ) : (\n        <Container>\n            <Helmet>\n                <title>{result.original_title ? result.original_title : result.original_name} | Nomflix</title>\n            </Helmet>\n            <Backdrop bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`} />\n            <Content>\n                <Cover bgImage={\n                    result.poster_path \n                    ? `https://image.tmdb.org/t/p/original${result.poster_path}` \n                    : require(\"../../assets/noPosterSmall.png\")\n                } />\n                <Data>\n                    <Title>{result.original_title ? result.original_title : result.original_name }</Title>\n                    <ItemContainer>\n                        <Item>\n                            {result.release_date ? result.release_date.substring(0, 4) : result.first_air_date.substring(0, 4)}\n                        </Item>\n                        <Divider>•</Divider>\n                        <Item>\n                            {result.runtime ? result.runtime : result.episode_run_time[0]} min\n                        </Item>\n                        <Divider>•</Divider>\n                        <Item>\n                            {result.genres && result.genres.map((genre, index) => index === result.genres.length -1 ? genre.name : `${genre.name} / ` )}\n                        </Item>\n\n                        <Item>\n                            {\n                                result.imdb_id && <ImdbLink href={`https://www.imdb.com/title/${result.imdb_id}`} target=\"_blank\">IMDb</ImdbLink>\n                            }\n                        </Item>\n                    </ItemContainer>\n                    <OverView>\n                        {result.overview}\n                    </OverView>\n                    \n                    <Tabs>\n                        <TabList>\n                            <Tab>Production Information</Tab>\n                            <Tab>Videos</Tab>\n                        </TabList>\n                        <TabPanel>\n                            <ProductionInfo>\n                                <InfoTitle>Product Company</InfoTitle>\n                                <InfoList>\n                                {\n                                    result.production_companies \n                                    ? result.production_companies.map(company =>(\n                                        <InfoItem>{company.name}</InfoItem>\n                                    ))\n                                    : `no company`\n                                }\n                                </InfoList>\n                                \n                            </ProductionInfo>\n                            <ProductionInfo>\n                                <InfoTitle>Product Country</InfoTitle>\n                                <InfoList>\n                                {\n                                    result.production_countries \n                                    ? result.production_countries.map(country =>(\n                                        <InfoItem>{country.name}</InfoItem>\n                                    ))\n                                    : `no company`\n                                }\n                                </InfoList>\n                                \n                            </ProductionInfo>\n                        </TabPanel>\n                        <TabPanel>\n                            <VideoContainer>\n                            {\n                                result.videos.results &&   \n                                    <ReactPlayer width=\"100%\" height=\"100%\" url={`https://www.youtube.com/watch?v=${result.videos.results[0].key}`} />                             \n                            }\n                            </VideoContainer>\n                        </TabPanel>\n                    </Tabs>\n                </Data>\n            </Content>\n        </Container>\n    )\n);\n\nDetailPresenter.propTypes ={\n    result:PropTypes.object,\n    loading:PropTypes.bool.isRequired, \n    error:PropTypes.string\n}\n\nexport default DetailPresenter;","import DetailContainer from \"./DetailContainer\";\n\n\nexport default DetailContainer;","import React from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport { moviesApi, tvApi } from \"api\";\n\nexport default class extends React.Component{\n    constructor(props){\n        super(props);\n        const {location: {pathname}} = props;\n        this.state = {\n            result: null,\n            error: null,\n            loading: true,\n            isMovie: pathname.includes(\"/movie/\")\n        }\n    }\n    \n    async componentDidMount(){\n        const {\n            match: { params: { id } },\n            history: {push}\n        } = this.props;\n        const {isMovie} = this.state;\n        const parsedId = parseInt(id);\n\n        if(isNaN(parsedId)){\n            return push(\"/\");\n        }\n        let result = null;\n        try {\n            if(isMovie){\n                ({data: result} = await moviesApi.movieDetail(parsedId));\n            }else {\n                ({data: result} = await tvApi.showDetail(parsedId));\n            }\n        } catch {\n            this.setState({\n                error: \"Can't find anything\"\n            });\n        } finally {\n            this.setState({\n                loading: false, result\n            });\n        }\n    }\n\n    render(){\n        const { result, error, loading} = this.state;\n        console.log(result)\n        return (\n            <DetailPresenter \n            result={result} \n            error={error} \n            loading={loading} \n            />\n        ) \n    }\n}","import React from 'react';\nimport {BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport Home from 'Routes/Home';\nimport TV from 'Routes/TV';\nimport Search from 'Routes/Search';\nimport Header from 'Components/Header';\nimport Detail from 'Routes/Detail';\n\nexport default () => (\n    <Router>\n        <Header />\n        <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/tv\" exact component={TV} />\n            <Route path=\"/tv/popular\" render={() => <h1>Popular</h1>} />\n            <Route path=\"/search\" component={Search} />\n            <Route path=\"/movie/:id\" component={Detail} />\n            <Route path=\"/show/:id\" component={Detail} />\n        <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n    </Router>\n)","import {createGlobalStyle} from \"styled-components\";\nimport reset from \"styled-reset\";\n\nconst globalStyles = createGlobalStyle`\n    ${reset};\n    a{\n        text-decoration:none;\n        color:inherit;\n    }\n    *{\n        box-sizing:border-box;\n    }\n    body{\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size:12px;\n        background-color:rgba(20,20,20,1);\n        color:white;\n        padding-top:50px;\n    }\n`;\n\nexport default globalStyles;","import React, { Component} from 'react';\nimport Router from 'Components/Router';\nimport GlobalStyles from 'Components/GlobalStyles';\n\n\nclass App extends Component {\n  render(){\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport \"./api\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}