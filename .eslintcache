[{"/Users/min/React/nomflix/src/index.js":"1","/Users/min/React/nomflix/src/api.js":"2","/Users/min/React/nomflix/src/Components/App.js":"3","/Users/min/React/nomflix/src/Components/Router.js":"4","/Users/min/React/nomflix/src/Components/GlobalStyles.js":"5","/Users/min/React/nomflix/src/Components/Header.js":"6","/Users/min/React/nomflix/src/Components/Loader.js":"7","/Users/min/React/nomflix/src/Components/Section.js":"8","/Users/min/React/nomflix/src/Components/Poster.js":"9","/Users/min/React/nomflix/src/Components/Message.js":"10","/Users/min/React/nomflix/src/Components/Season.js":"11","/Users/min/React/nomflix/src/Components/VideoSlide.js":"12","/Users/min/React/nomflix/src/Routes/TV.js":"13","/Users/min/React/nomflix/src/Routes/Home.js":"14","/Users/min/React/nomflix/src/Routes/Search.js":"15","/Users/min/React/nomflix/src/Routes/Movie.js":"16","/Users/min/React/nomflix/src/Routes/Detail.js":"17"},{"size":222,"mtime":1611230508000,"results":"18","hashOfConfig":"19"},{"size":1246,"mtime":1613257367116,"results":"20","hashOfConfig":"19"},{"size":286,"mtime":1611604858000,"results":"21","hashOfConfig":"19"},{"size":886,"mtime":1613264363426,"results":"22","hashOfConfig":"19"},{"size":559,"mtime":1611569723000,"results":"23","hashOfConfig":"19"},{"size":1387,"mtime":1613257097346,"results":"24","hashOfConfig":"19"},{"size":470,"mtime":1611663738000,"results":"25","hashOfConfig":"19"},{"size":795,"mtime":1613259046241,"results":"26","hashOfConfig":"19"},{"size":1890,"mtime":1611566483000,"results":"27","hashOfConfig":"19"},{"size":514,"mtime":1611327724000,"results":"28","hashOfConfig":"19"},{"size":1419,"mtime":1613258706326,"results":"29","hashOfConfig":"19"},{"size":1186,"mtime":1613318546486,"results":"30","hashOfConfig":"19"},{"size":3396,"mtime":1613307251558,"results":"31","hashOfConfig":"19"},{"size":5780,"mtime":1613266098003,"results":"32","hashOfConfig":"19"},{"size":4415,"mtime":1613404547197,"results":"33","hashOfConfig":"19"},{"size":3396,"mtime":1613266109807,"results":"34","hashOfConfig":"19"},{"size":10384,"mtime":1613318718249,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"17m9wcx",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},"/Users/min/React/nomflix/src/index.js",[],["74","75"],"/Users/min/React/nomflix/src/api.js",[],"/Users/min/React/nomflix/src/Components/App.js",[],"/Users/min/React/nomflix/src/Components/Router.js",["76"],"import React from 'react';\nimport {HashRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport Home from '../Routes/Home';\nimport Movie from '../Routes/Movie';\nimport TV from '../Routes/TV';\nimport Search from '../Routes/Search';\nimport Header from 'Components/Header';\nimport Detail from '../Routes/Detail';\n\nexport default () => (\n    <Router>\n        <Header />\n        <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/movie\" exact component={Movie} />\n            <Route path=\"/tv\" exact component={TV} />\n            <Route path=\"/tv/popular\" render={() => <h1>Popular</h1>} />\n            <Route path=\"/search\" component={Search} />\n            <Route path=\"/movie/:id\" component={Detail} />\n            <Route path=\"/show/:id\" component={Detail} />\n        <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n    </Router>\n)","/Users/min/React/nomflix/src/Components/GlobalStyles.js",[],"/Users/min/React/nomflix/src/Components/Header.js",[],"/Users/min/React/nomflix/src/Components/Loader.js",["77"],"import React from \"react\";\nimport styled from \"styled-components\";\n\nconst LoadingBar = styled.div`\n    margin: 0 auto;\n    margin-top: 50px;\n    border: 8px solid #2d3436;\n    border-top: 8px solid #e74c3c; /* Red */\n    border-radius: 50%;\n    width: 60px;\n    height: 60px;\n    animation: spin 2s linear infinite;\n\n    @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n    }\n`;\n\nexport default () => <LoadingBar />;\n","/Users/min/React/nomflix/src/Components/Section.js",[],"/Users/min/React/nomflix/src/Components/Poster.js",[],"/Users/min/React/nomflix/src/Components/Message.js",[],"/Users/min/React/nomflix/src/Components/Season.js",[],"/Users/min/React/nomflix/src/Components/VideoSlide.js",[],"/Users/min/React/nomflix/src/Routes/TV.js",[],"/Users/min/React/nomflix/src/Routes/Home.js",[],"/Users/min/React/nomflix/src/Routes/Search.js",[],"/Users/min/React/nomflix/src/Routes/Movie.js",[],"/Users/min/React/nomflix/src/Routes/Detail.js",["78"],"import React, {useState, useEffect} from \"react\";\nimport styled from \"styled-components\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport Helmet from \"react-helmet\";\nimport Loader from \"Components/Loader\";\nimport Message from \"Components/Message\";\nimport Section from \"Components/Section\";\nimport Season from \"Components/Season\";\nimport VideoSlide from \"Components/VideoSlide\";\nimport { hasFlag } from \"country-flag-icons\";\nimport { moviesApi, tvApi } from \"api\";\n\nconst Container = styled.div`\n    height: calc(100vh - 50px);\n    width: 100%;\n    position:relative;\n    padding: 50px;\n`;\n\nconst Backdrop = styled.div`\n    position: absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n    background-image: url(${props => props.bgImage});\n    background-position:center center;\n    background-size: cover;\n    filter:blur(3px);\n    opacity:0.5;\n    z-index:0;\n`;\n\nconst Content = styled.div`\n    display: flex;\n    width:100%;\n    height:100%;\n    position:relative;\n    z-index:1;\n`;\n\nconst Cover = styled.div`\n    width: 30%;\n    background-image: url(${props => props.bgImage});\n    background-position:center center;\n    background-size: cover;\n    height:100%;\n    border-radius: 5px;\n`;\n\nconst Data = styled.div`\n    width:70%;\n    margin-left:10px;\n`;\n\nconst Title = styled.h3`\n    font-size: 32px;\n`;\n\nconst Lang = styled.span`\n    font-size: 14px;\n    margin-left: 5px;\n    color: rgba(255, 255, 255, 0.5); \n`;\n\nconst ItemContainer = styled.div`\n    margin:20px 0;\n`;\n\nconst Item = styled.span``;\n\nconst ImdbLink = styled.a`\n    margin: 0 0 0 10px;\n    padding: 2px 4px;\n    font-weight:600;\n    background-color:#e1b12c;\n    border-radius:2px;\n    font-size: 10px;\n    color:#000;\n\n    &:hover {\n        background-color:#fbc531;\n    }\n`;\n\nconst HompageLink = styled.a`\n    margin: 0 0 0 10px;\n    padding: 2px 4px;\n    font-weight:600;\n    background-color:#f0932b;\n    border-radius:2px;\n    font-size: 10px;\n    color:#000;\n\n    &:hover {\n        background-color:#ffbe76;\n    }\n`;\n\nconst Divider = styled.span`\n    margin: 0 10px;\n`;\n\nconst OverView = styled.p`\n    font-size: 12px;\n    opacity: 0.7;\n    line-height:1.5;\n    width:50%;\n    margin-bottom: 20px;\n`;\n\nconst TabContent = styled.div`\n    padding:0 10px;\n    margin-bottom: 20px;\n\n    &:last-child {\n        padding-bottom: 40px;\n    }\n`;\n\nconst ContentTitle = styled.h4`\n    font-size: 13px;\n    font-weight:600;\n    \n`;\n\nconst ContentList = styled.ul`\n    margin-top: 10px;\n    margin-bottom: 10px;\n`;\n\nconst InfoItem = styled.li`\n    margin-bottom: 5px;\n    &::before{\n        content: \"ãƒ»\"\n    }\n`;\n\nconst FlagImg = styled.img`\n    width:30px;\n    margin-right:5px;\n`;\n\nconst VideoContainer = styled.div`\n   padding: 0 20px;\n   max-width:100%;\n`;\n\nconst Detail = (\n    {location: { pathname },\n    match: {\n      params: { id }\n    },\n    history: { push }}) => {\n    const [result, setResult] = useState();\n    const [error, setError] = useState();\n    const [loading, setLoading] = useState(true);\n    const parsedId = parseInt(id);\n\n    useEffect(() => {\n        if(isNaN(parsedId)){\n            return push(\"/\");\n        }\n        async function fetchData() {\n            try {\n                if(pathname.includes(\"/movie/\")){\n                    const {data: result} = await moviesApi.movieDetail(parsedId);\n                    setResult(result)\n                }else {\n                    const {data: result} = await tvApi.showDetail(parsedId);\n                    setResult(result)\n                }\n            } catch {\n                setError(\"Can't find anything\")\n            } finally {\n                setLoading(false)\n            }\n        };\n        \n        fetchData();\n    }, [id])\n\n    return loading ? (\n        <>\n        <Helmet>\n            <title>Loading | Nomflix</title>\n        </Helmet>\n        <Loader />\n        </>\n    ) : (\n        <Container>\n            <Helmet>\n                <title>{result.original_title ? result.original_title : result.original_name} | Nomflix</title>\n            </Helmet>\n            <Backdrop bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`} />\n            <Content>\n                <Cover bgImage={\n                    result.poster_path \n                    ? `https://image.tmdb.org/t/p/original${result.poster_path}` \n                    : require(\"../assets/noPosterSmall.png\")\n                } />\n                <Data>\n                    <Title>\n                        {result.original_title ? result.original_title : result.original_name }\n                        {\n                            result.spoken_languages.map(lang => (\n                            <Lang>{lang.name}</Lang>))\n                        }\n                    </Title>\n                    \n                    <ItemContainer>\n                        <Item>\n                            {result.release_date ? result.release_date.substring(0, 4) : result.first_air_date.substring(0, 4)}\n                        </Item>\n                        <Divider>â€¢</Divider>\n                        <Item>\n                            {result.runtime ? result.runtime : result.episode_run_time[0]} min\n                        </Item>\n                        <Divider>â€¢</Divider>\n                        <Item>\n                            {result.genres && result.genres.map((genre, index) => index === result.genres.length -1 ? genre.name : `${genre.name} / ` )}\n                        </Item>\n                        <Item>\n                            {\n                                result.imdb_id && <ImdbLink href={`https://www.imdb.com/title/${result.imdb_id}`} target=\"_blank\">IMDb</ImdbLink>\n                            }\n                        </Item>\n                        <Item>\n                            {\n                                result.homepage && <HompageLink href={result.homepage} target=\"_blank\">HOMEPAGE</HompageLink>\n                            }\n                        </Item>\n                    </ItemContainer>\n                    <OverView>\n                        {result.overview}\n                    </OverView>\n                    \n                    <Tabs>\n                        <TabList>\n                            <Tab>Production Information</Tab>\n                            <Tab>Videos</Tab>\n                            {\n                                result.seasons && result.seasons.length > 0 &&\n                                <Tab>Seasons</Tab>\n                            }\n                        </TabList>\n                        <TabPanel>\n                            <TabContent>\n                                <ContentTitle>Production Company</ContentTitle>\n                                <ContentList>\n                                {\n                                    result.production_companies.length > 0 \n                                    ? result.production_companies.map(company =>(\n                                        <InfoItem>{company.name}</InfoItem>\n                                    ))\n                                    : `No company information`\n                                }\n                                </ContentList>\n                                \n                            </TabContent>\n                            <TabContent>\n                                <ContentTitle>Production Country</ContentTitle>\n                                <ContentList>\n                                {\n                                    result.production_countries.length > 0  \n                                    ? result.production_countries.map(country =>(\n                                        hasFlag(`${country.iso_3166_1}`) \n                                        ? <FlagImg title={`${country.name}`} src={`http://purecatamphetamine.github.io/country-flag-icons/3x2/${country.iso_3166_1}.svg`} />\n                                        : <InfoItem>{country.name}</InfoItem>\n                                    ))\n                                    : `No country information`\n                                }\n                                </ContentList>\n                            </TabContent>\n                        </TabPanel>\n                        <TabPanel>\n                            {\n                                result.videos.results.length > 0 \n                                ? <VideoContainer><VideoSlide videoData={result.videos.results} /></VideoContainer>\n                                : <TabContent>No Video</TabContent>\n                            }\n                        </TabPanel>\n                        <TabPanel>\n                            \n                            {\n                                result.seasons && result.seasons.length > 0 &&\n                                    <TabContent>\n                                        <ContentTitle>Total of Seasons : {result.number_of_seasons}</ContentTitle>\n                                            <Section>\n                                            {\n                                                result.seasons.length > 0 \n                                                ? (\n                                                    result.seasons.map(s => \n                                                        <Season \n                                                        key={s.id} \n                                                        id={s.id}\n                                                        imageUrl={s.poster_path}\n                                                        name={s.name} \n                                                        episode_count={s.episode_count}\n                                                        air_date={s.air_date}\n                                                        />\n                                                    )\n                                                ) : \"No Season\"\n                                            }\n                                            </Section>\n                                    </TabContent>\n                            }\n                        </TabPanel>\n                    </Tabs>\n                </Data>\n            </Content>\n            {error && <Message color=\"#d63031\" text={error} />}\n        </Container>\n    )\n}\n\nexport default Detail;",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":10,"column":1,"nodeType":"85","endLine":24,"endColumn":2},{"ruleId":"83","severity":1,"message":"84","line":20,"column":1,"nodeType":"85","endLine":20,"endColumn":37},{"ruleId":"86","severity":1,"message":"87","line":182,"column":8,"nodeType":"88","endLine":182,"endColumn":12,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'parsedId', 'pathname', and 'push'. Either include them or remove the dependency array. If 'push' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["92"],"no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},"Update the dependencies array to be: [id, parsedId, pathname, push]",{"range":"95","text":"96"},[3752,3756],"[id, parsedId, pathname, push]"]